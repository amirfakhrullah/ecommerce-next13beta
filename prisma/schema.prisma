// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Order
model Product {
  id          String   @id @default(cuid())
  name        String   @unique
  image       String?
  description String?
  quantity    Int
  price       Int 
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  orders      Order[]
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique
  products Product[]
}

enum Status {
  Paid
  Cancel
  OnTheWay
}

model Order {
  id       String    @id @default(cuid())
  products Product[]
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  status   Status
  size     Int
}

model Address {
  id       String @id @default(cuid())
  street   String
  postcode Int
  state    String
  country  String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([userId])
}

// Next-Auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  address       Address?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
